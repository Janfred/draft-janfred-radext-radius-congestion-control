



RADIUS EXTensions                                         J.-F. Rieckers
Internet-Draft                                                       DFN
Intended status: Experimental                              13 March 2025
Expires: 14 September 2025


 Methods for Mitigation of Congestion and Load Issues on RADIUS Servers
         draft-janfred-radext-radius-congestion-control-latest

Abstract

   The RADIUS protocol as defined in [RFC2865] does not have a means to
   signal server overload or congesition to the clients.  This can lead
   to load problems, especially in a federated RADIUS proxy fabric.
   This document attempts to fix this.

About This Document

   This note is to be removed before publishing as an RFC.

   Status information for this document may be found at
   https://datatracker.ietf.org/doc/draft-janfred-radext-radius-
   congestion-control/.

   Discussion of this document takes place on the RADIUS EXTensions
   mailing list (mailto:radext@ietf.org), which is archived at
   https://mailarchive.ietf.org/arch/browse/radext/.  Subscribe at
   https://www.ietf.org/mailman/listinfo/radext/.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 14 September 2025.

Copyright Notice

   Copyright (c) 2025 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Conventions and Definitions
   3.  Protocol Description
     3.1.  Proxy-Capability Attribute
     3.2.  Response-Delay Attribute
     3.3.  Response-Block Attribute
   4.  Security Considerations
   5.  IANA Considerations
   6.  Normative References
   Acknowledgments
   Author's Address

1.  Introduction

   The RADIUS protocol [RFC2865] does not have a means to signal a
   server overload or a congestion to RADIUS clients.  These overload
   situations may be a result of a high load of legitimate traffic and
   might even be worsened by retransmissions of packets the server
   failed to answer due to the high load.  These situation can happen in
   a lost of scenarios.  In RADIUS proxy fabric, a server overload may
   even result from a single RADIUS client, for example when an EAP
   supplicant immediately starts a new authentication try without delay
   when getting a reject.

   Especially in RADIUS proxy fabrics, the impact of misbehaving clients
   on the whole proxy chain can be reduced by reducing the packet load
   at the entry level or as early in the proxy chain as possible.  Since
   the end user device cannot be controlled, we have to rely on the
   RADIUS proxies to implement coutermeasures.

   These countermeasures can be used to reduce the load by one of two
   methods.

   First, the response to requests can be delayed.  By delaying RADIUS
   responses, the client has to wait for the answer to send its next
   request, which decreases the packet load on the server.  This method
   can also be used to slow down clients that immediately retry the
   authentication once they receive a reject.

   When a home server knows that an authentication of this client cannot
   succeed (for example because it used an expired certificate with EAP-
   TLS), and the client keeps retrying, any RADIUS actor along the proxy
   chain could generate a reject for this specific user.

   Pushing these countermeasures to the the earliest possible proxy
   inside the proxy chain has multiple advantages over rejecting it at
   the home server.  First, it reduces the load on all proxies in the
   proxy chain, since they do not need to forward traffic that will get
   rejected anyway.  Secondly, when the response should get delayed,
   pushing this delay as far down the proxy chain prevents RADIUS
   retransmissions.  When the RADIUS proxy already has the response, it
   then does not need to proxy the retransmitted RADIUS packets, which
   reduces the load for the RADIUS proxies in the later proxy chain.
   Instead, the RADIUS proxy just ignores the retransmission, since it
   already has an answer for this RADIUS packet, it just delays its
   response.

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

   Additionally, we use the following terms in this document, in the
   meaning as defined here:

   RADIUS Instance  A single device or software module that implements
      the RADIUS protocol

   RADIUS Proxy  A single device or software module that acts as RADIUS
      server and RADIUS client at the same time.  It receives RADIUS
      requests and forwards them towards the next RADIUS proxy, usually
      based on the realm of the User-Name attribute.

   RADIUS Proxy Chain  the list of RADIUS Instances that a RADIUS
      Request traverses from the first RADIUS Client across any number
      of RADIUS proxies to the final RADIUS Server that responds to the
      RADIUS Request.

3.  Protocol Description

   The protocol extension consists of two parts: First, any RADIUS proxy
   in the proxy chain capable of either of the two countermeasures needs
   to signal this capability to the following RADIUS proxies and the
   home server, so they know whether or not they can use this feature.
   Second, for the reply, the home server or RADIUS proxy needs to
   signal the reply policy back to the previous RADIUS proxies.

3.1.  Proxy-Capability Attribute

   The Proxy-Capability Attribute is used to signal the capability of a
   RADIUS proxy to any RADIUS entity in the later proxy chain.  With the
   help of this, on the reply path, a RADIUS proxy can determine whether
   the requested action should be performed by itself or the packet will
   pass through another capable proxy later which can then perform the
   actions.

   The Proxy-Capability Attribute is of type string as defined in
   [RFC8044], Section 3.5.  The value of the Proxy-Capability Attribute
   is a concatenated list of the proxy capabilities the RADIUS Instance
   has.

   Correct formal description: TODO

   Informal description: concatenate all capabilities. values up to 127
   are encoded in one byte, extended capabilities are encoded as two
   bytes.  For parsing, the receiver can look at the first bit, if it is
   a 0 it is a single-byte value, if it is a 1, then the capability is a
   two-byte value.  This allows for simple extension, while keeping it
   as simple and short as possible.  The attribute MUST NOT include a
   capability multiple times.

   Each capable RADIUS Instance in the RADIUS Proxy Chain SHOULD add the
   Proxy-Capability Attribute for Access-Request and Accounting-Request
   packets before forwarding the RADIUS packet to the next RADIUS
   instance.  Future capabilityes MAY specify capabilities for other
   RADIUS packet types.  The capabilities defined in this document
   SHOULD only be added for Access-Request and Accounting-Request
   packets when Proxy-Capabilitiy is used with other RADIUS packets.

   When a capable RADIUS proxy receives a RADIUS packet with the Proxy-
   Capability Attribute, the RADIUS Proxy SHOULD add its own
   capabilities to the Attribute if the capability is not yet included.
   The RADIUS Proxy MUST NOT remove existing capabilities, unless
   explicitly configured to remove them.  As a hint, administrators
   SHOULD only configure the removal of capabilities when they know that
   the capability is not honored.

   In this document, we define two capabilities:

   Capability Response-Delay-Capable  The Capability Response-Delay-
      Capable with value 1 is used to signal that the RADIUS Instance is
      capable of delaying RADIUS Response packets.

   Capability Response-Block-Capable  The capability Response-Block-
      Capable with value 2 is used to signal that the RADIUS Instance is
      capable of blocking RADIUS Requests that match specific criteria
      and sending an Access-Reject instead on behalf of the home server.

3.2.  Response-Delay Attribute

   The Response-Delay Attribute is used to signal the desire of the home
   server that sending of the RADIUS response should be delayed for a
   certain amount.  The Response-Delay Attribute is of type integer as
   defined in [RFC8044], Section 3.1.  The value is the deplay in
   milliseconds.

3.3.  Response-Block Attribute

   The Response-Block Attribute is used to signal the desire of the home
   server that future requests that match certain criteria should be
   rejected by a RADIUS Instance on behalf of the home server.

4.  Security Considerations

   TODO Security

5.  IANA Considerations

   This document will have IANA actions.

   They are still TODO in detail.

   Roughly the following things should be allocated:

   *  Attribute Type (possibly from extended attributes) for Proxy-
      Capability of type string (Extended-Attribute-1, TBD1)

   *  New registry table for for types in the Proxy-Capability attribute

      -  0 - reserved

      -  1 - Response-Delay-Capable

      -  2 - Response-Block-Capable

      -  3-125 - reserved for future use

      -  126 , 127 - experimental

      -  128 - 255 - Extended Capability

   *  Attribute Type for Response-Delay of type integer (Extended-
      Attribute-1, TBD2)

   *  Attribute Type for Response-Block of type tlv (Extended-Attribute-
      1, TBD3)

   *  New registry table for types in the Response-Delay attributes

      -  0 - reserved

      -  1 - Response-Block, Type integer, request to stop sending data
         for this particular user for period of time, time in seconds

      -  2 - Response-Block-Attributes, type string

      -  3-250 - reserved for future use

      -  251 - private use

      -  252-255 - experimental

   *  New entry in the registry for Values for RADIUS Attribute 101,
      Error-Cause Attribute

      -  4XX (TBD4) Request ratelimited

6.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC2865]  Rigney, C., Willens, S., Rubens, A., and W. Simpson,
              "Remote Authentication Dial In User Service (RADIUS)",
              RFC 2865, DOI 10.17487/RFC2865, June 2000,
              <https://www.rfc-editor.org/rfc/rfc2865>.

   [RFC8044]  DeKok, A., "Data Types in RADIUS", RFC 8044,
              DOI 10.17487/RFC8044, January 2017,
              <https://www.rfc-editor.org/rfc/rfc8044>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

Acknowledgments

   TODO acknowledge.

Author's Address

   Jan-Frederik Rieckers
   Deutsches Forschungsnetz | German National Research and Education Network
   Alexanderplatz 1
   10178 Berlin
   Germany
   Email: rieckers@dfn.de
   URI:   www.dfn.de
